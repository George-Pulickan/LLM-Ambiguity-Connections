{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNxWWJmn87mIwdkTQQgby47"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# Please look at the code below to iron out any bugs\n","\n","!pip install transformers datasets -q\n","!pip install torch scikit-learn -q\n","\n","import json\n","from datasets import Dataset\n","from transformers import AutoModelForCausalLM, AutoTokenizer, Trainer, TrainingArguments\n","from sklearn.model_selection import train_test_split\n","import torch\n","\n","# Step 1: Load the dataset\n","with open(\"Training_Data.json\", \"r\") as data_file:\n","    puzzles = json.load(data_file)\n","\n","# Step 2: Process the dataset into instruction-response pairs\n","dataset_list = []\n","for puzzle in puzzles:\n","    final_puzzle = puzzle[\"final_puzzle\"]\n","    final_groups = puzzle[\"final_groups\"]\n","\n","    # Generate instruction and response\n","    instruction = f\"Group the following words into categories:\\n{', '.join(final_puzzle)}\"\n","    response = \"\\n\".join(\n","        [f\"{i+1}. {category}: {', '.join(words)}\" for i, (category, words) in enumerate(final_groups.items())]\n","    )\n","    dataset_list.append({\"instruction\": instruction, \"response\": response})\n","\n","# Step 3: Split into train and validation datasets\n","train_list, val_list = train_test_split(dataset_list, train_size=0.8, random_state=42)\n","train_dataset = Dataset.from_list(train_list)\n","val_dataset = Dataset.from_list(val_list)\n","\n","# Step 4: Load the model and tokenizer\n","model_name = \"facebook/opt-1.3b\"  # Replace with an actual Hugging Face model\n","model = AutoModelForCausalLM.from_pretrained(model_name)\n","tokenizer = AutoTokenizer.from_pretrained(model_name)\n","\n","# Step 5: Tokenize the data\n","def tokenize_data(example):\n","    instruction = example[\"instruction\"]\n","    response = example[\"response\"]\n","    input_text = f\"### Instruction:\\n{instruction}\\n### Response:\\n{response}\"\n","\n","    # Encode the input and response\n","    encoded = tokenizer(\n","        input_text,\n","        truncation=True,\n","        padding=\"max_length\",\n","        max_length=512,\n","        return_tensors=\"pt\"\n","    )\n","    encoded[\"labels\"] = tokenizer(\n","        response,\n","        truncation=True,\n","        padding=\"max_length\",\n","        max_length=512,\n","        return_tensors=\"pt\"\n","    )[\"input_ids\"]\n","    return {key: val.squeeze(0) for key, val in encoded.items()}  # Ensure tensors are not nested\n","\n","train_dataset = train_dataset.map(tokenize_data, batched=True)\n","val_dataset = val_dataset.map(tokenize_data, batched=True)\n","\n","# Set the datasets to return PyTorch tensors\n","train_dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"labels\"])\n","val_dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"labels\"])\n","\n","# Step 6: Define training arguments\n","training_args = TrainingArguments(\n","    output_dir=\"./llama-grouping-output\",\n","    num_train_epochs=3,\n","    per_device_train_batch_size=4,\n","    per_device_eval_batch_size=4,\n","    gradient_accumulation_steps=8,\n","    fp16=torch.cuda.is_available(),\n","    evaluation_strategy=\"epoch\",\n","    save_strategy=\"epoch\",\n","    logging_dir=\"./logs\",\n","    logging_steps=100,\n","    save_total_limit=2,\n","    load_best_model_at_end=True,\n",")\n","\n","# Step 7: Set up the Trainer\n","trainer = Trainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=train_dataset,\n","    eval_dataset=val_dataset,\n","    tokenizer=tokenizer,\n",")\n","\n","# Step 8: Fine-tune the model\n","trainer.train()\n","\n","# Step 9: Save the fine-tuned model and tokenizer\n","model.save_pretrained(\"fine_tuned_llama_grouping\")\n","tokenizer.save_pretrained(\"fine_tuned_llama_grouping\")\n","\n","# Step 10: Test the fine-tuned model\n","input_prompt = \"### Instruction:\\nGroup the following words into categories:\\nPanther, Owl, Shark, Tiger, Pitch, Jam, Ring, Saxophone, Trumpet, Drums, Cornfield, Labyrinth, Hampton Court, Minotaur\\n### Response:\\n\"\n","input_ids = tokenizer.encode(input_prompt, return_tensors=\"pt\").to(model.device)\n","\n","# Generate the response\n","model.eval()  # Set model to evaluation mode\n","generated_ids = model.generate(input_ids, max_length=200)\n","generated_text = tokenizer.decode(generated_ids[0], skip_special_tokens=True)\n","print(generated_text)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":216},"id":"lFoair93cnEp","executionInfo":{"status":"error","timestamp":1732959719341,"user_tz":0,"elapsed":13225,"user":{"displayName":"George Pulickan","userId":"10998863919824261837"}},"outputId":"ce0129d7-458b-4690-d30a-7372d48846db"},"execution_count":7,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'Training_Data.json'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-52ed415a6d71>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Step 1: Load the dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Training_Data.json\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mdata_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0mpuzzles\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'Training_Data.json'"]}]},{"cell_type":"code","source":["# Reference code\n","\n","import json\n","from datasets import Dataset\n","from transformers import LlamaForCausalLM, LlamaTokenizer, Trainer, TrainingArguments\n","from sklearn.model_selection import train_test_split\n","\n","# Step 1: Load the dataset\n","with open(\"Training_Data.json\", \"r\") as data_file:\n","    puzzles = json.load(data_file)\n","\n","# Step 2: Process the dataset into instruction-response pairs\n","dataset_list = []\n","for puzzle in puzzles:\n","    final_puzzle = puzzle[\"final_puzzle\"]\n","    final_groups = puzzle[\"final_groups\"]\n","\n","    # Generate instruction and response\n","    instruction = f\"Group the following words into categories:\\n{', '.join(final_puzzle)}\"\n","    response = \"\\n\".join(\n","        [f\"{i+1}. {category}: {', '.join(words)}\" for i, (category, words) in enumerate(final_groups.items())]\n","    )\n","    dataset_list.append({\"instruction\": instruction, \"response\": response})\n","\n","# Step 3: Split into train and validation datasets\n","train_list, val_list = train_test_split(dataset_list, train_size=0.8, random_state=42)\n","train_dataset = Dataset.from_list(train_list)\n","val_dataset = Dataset.from_list(val_list)\n","\n","# Step 4: Load the Llama model and tokenizer\n","model_name = \"huggingface/llama-3.1-8b\"\n","model = LlamaForCausalLM.from_pretrained(model_name)\n","tokenizer = LlamaTokenizer.from_pretrained(model_name)\n","\n","# Step 5: Tokenize the data\n","def tokenize_data(example):\n","    instruction = example[\"instruction\"]\n","    response = example[\"response\"]\n","    input_text = f\"### Instruction:\\n{instruction}\\n### Response:\\n{response}\"\n","\n","    # Encode the input and response\n","    encoded = tokenizer(\n","        input_text,\n","        truncation=True,\n","        padding=\"max_length\",\n","        max_length=512,\n","    )\n","    encoded[\"labels\"] = tokenizer(\n","        response,\n","        truncation=True,\n","        padding=\"max_length\",\n","        max_length=512\n","    )[\"input_ids\"]\n","    return encoded\n","\n","train_dataset = train_dataset.map(tokenize_data, batched=True)\n","val_dataset = val_dataset.map(tokenize_data, batched=True)\n","\n","# Step 6: Define training arguments\n","training_args = TrainingArguments(\n","    output_dir=\"./llama-3.1-8b-grouping-output\",\n","    num_train_epochs=3,\n","    per_device_train_batch_size=4,\n","    per_device_eval_batch_size=4,\n","    gradient_accumulation_steps=8,\n","    fp16=True,\n","    evaluation_strategy=\"epoch\",\n","    save_strategy=\"epoch\",\n","    logging_dir=\"./logs\",\n","    logging_steps=100,\n","    save_total_limit=2,\n","    load_best_model_at_end=True,\n",")\n","\n","# Step 7: Set up the Trainer\n","trainer = Trainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=train_dataset,\n","    eval_dataset=val_dataset,\n","    tokenizer=tokenizer,\n",")\n","\n","# Step 8: Fine-tune the model\n","trainer.train()\n","\n","# Step 9: Save the fine-tuned model and tokenizer\n","model.save_pretrained(\"fine_tuned_llama_grouping\")\n","tokenizer.save_pretrained(\"fine_tuned_llama_grouping\")\n","\n","# Step 10: Test the fine-tuned model\n","input_prompt = \"### Instruction:\\nGroup the following words into categories:\\nPanther, Owl, Shark, Tiger, Pitch, Jam, Ring, Saxophone, Trumpet, Drums, Cornfield, Labyrinth, Hampton Court, Minotaur\\n### Response:\\n\"\n","input_ids = tokenizer.encode(input_prompt, return_tensors=\"pt\")\n","\n","# Generate the response\n","generated_ids = model.generate(input_ids, max_length=200)\n","generated_text = tokenizer.decode(generated_ids[0], skip_special_tokens=True)\n","print(generated_text)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":216},"id":"Iz-FPn3IVB-0","executionInfo":{"status":"error","timestamp":1732958369942,"user_tz":0,"elapsed":222,"user":{"displayName":"George Pulickan","userId":"10998863919824261837"}},"outputId":"3a6f10b3-f4f5-4241-dab5-99bf8d655c6b"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'Training_Data.json'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-0c4a71966c59>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Step 1: Load the dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Training_Data.json\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mdata_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0mpuzzles\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'Training_Data.json'"]}]},{"cell_type":"code","source":["pip install datasets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7w-q0PIhVQAM","executionInfo":{"status":"ok","timestamp":1732957798721,"user_tz":0,"elapsed":23965,"user":{"displayName":"George Pulickan","userId":"10998863919824261837"}},"outputId":"b621a8f0-8e30-4b6c-b59d-97a65cc9a6a6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting datasets\n","  Downloading datasets-3.1.0-py3-none-any.whl.metadata (20 kB)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from datasets) (3.16.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from datasets) (1.26.4)\n","Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (17.0.0)\n","Collecting dill<0.3.9,>=0.3.0 (from datasets)\n","  Downloading dill-0.3.8-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from datasets) (2.2.2)\n","Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.10/dist-packages (from datasets) (2.32.3)\n","Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.10/dist-packages (from datasets) (4.66.6)\n","Collecting xxhash (from datasets)\n","  Downloading xxhash-3.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n","Collecting multiprocess<0.70.17 (from datasets)\n","  Downloading multiprocess-0.70.16-py310-none-any.whl.metadata (7.2 kB)\n","Collecting fsspec<=2024.9.0,>=2023.1.0 (from fsspec[http]<=2024.9.0,>=2023.1.0->datasets)\n","  Downloading fsspec-2024.9.0-py3-none-any.whl.metadata (11 kB)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets) (3.11.2)\n","Requirement already satisfied: huggingface-hub>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (0.26.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from datasets) (24.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from datasets) (6.0.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (2.4.3)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (24.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.5.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (6.1.0)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (0.2.0)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.17.2)\n","Requirement already satisfied: async-timeout<6.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (4.0.3)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.23.0->datasets) (4.12.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.32.2->datasets) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.32.2->datasets) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.32.2->datasets) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.32.2->datasets) (2024.8.30)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2024.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.16.0)\n","Downloading datasets-3.1.0-py3-none-any.whl (480 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m480.6/480.6 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dill-0.3.8-py3-none-any.whl (116 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m116.3/116.3 kB\u001b[0m \u001b[31m8.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading fsspec-2024.9.0-py3-none-any.whl (179 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m179.3/179.3 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading multiprocess-0.70.16-py310-none-any.whl (134 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m134.8/134.8 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading xxhash-3.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (194 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.1/194.1 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: xxhash, fsspec, dill, multiprocess, datasets\n","  Attempting uninstall: fsspec\n","    Found existing installation: fsspec 2024.10.0\n","    Uninstalling fsspec-2024.10.0:\n","      Successfully uninstalled fsspec-2024.10.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","gcsfs 2024.10.0 requires fsspec==2024.10.0, but you have fsspec 2024.9.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed datasets-3.1.0 dill-0.3.8 fsspec-2024.9.0 multiprocess-0.70.16 xxhash-3.5.0\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c24i8Nc0Uzcf"},"outputs":[],"source":["# The code below is the old one not adapted\n","\n","import json\n","from datasets import Dataset\n","from transformers import LlamaForCausalLM, LlamaTokenizer, Trainer, TrainingArguments\n","from sklearn.model_selection import train_test_split\n","\n","# Step 1: Load synthetic data\n","with open(\"Training_Data.json\", \"r\") as data_file:\n","    data = json.load(data_file)\n","\n","with open(\"Training_Data_Ans.json\", \"r\") as answers_file:\n","    answers = json.load(answers_file)\n","\n","# Step 2: Convert data to instruction-response pairs\n","dataset_list = []\n","for game_id, words in data.items():\n","    for answer in answers:\n","        if str(answer[\"id\"]) == game_id:\n","            correct_groups = answer[\"answers\"]\n","            instruction = (\n","                f\"Group the following words into 4 categories with 4 words each:\\n{', '.join(words)}\"\n","            )\n","            response = \"\\n\".join(\n","                [f\"{i + 1}. {', '.join(group['members'])}\" for i, group in enumerate(correct_groups)]\n","            )\n","            dataset_list.append({\"instruction\": instruction, \"response\": response})\n","            break\n","\n","# Step 3: Split into train and validation datasets\n","train_list, val_list = train_test_split(dataset_list, train_size=0.8, random_state=42)\n","train_dataset = Dataset.from_list(train_list)\n","val_dataset = Dataset.from_list(val_list)\n","\n","# Step 4: Load LLaMA model and tokenizer\n","model_name = \"huggingface/llama-3.1-8b\"\n","model = LlamaForCausalLM.from_pretrained(model_name)\n","tokenizer = LlamaTokenizer.from_pretrained(model_name)\n","\n","# Step 5: Tokenize the data\n","def tokenize_data(example):\n","    instruction = example[\"instruction\"]\n","    response = example[\"response\"]\n","    input_text = f\"### Instruction:\\n{instruction}\\n### Response:\\n{response}\"\n","\n","    encoded = tokenizer(\n","        input_text,\n","        truncation=True,\n","        padding=\"max_length\",\n","        max_length=512,\n","    )\n","    encoded[\"labels\"] = tokenizer(\n","        response,\n","        truncation=True,\n","        padding=\"max_length\",\n","        max_length=512\n","    )[\"input_ids\"]\n","    return encoded\n","\n","train_dataset = train_dataset.map(tokenize_data, batched=True)\n","val_dataset = val_dataset.map(tokenize_data, batched=True)\n","\n","# Step 6: Define training arguments\n","training_args = TrainingArguments(\n","    output_dir=\"./llama-3.1-8b-synthetic-output\",\n","    num_train_epochs=3,\n","    per_device_train_batch_size=4,\n","    per_device_eval_batch_size=4,\n","    gradient_accumulation_steps=8,\n","    fp16=True,\n","    evaluation_strategy=\"epoch\",\n","    save_strategy=\"epoch\",\n","    logging_dir=\"./logs\",\n","    logging_steps=100,\n","    save_total_limit=2,\n","    load_best_model_at_end=True,\n",")\n","\n","# Step 7: Set up the Trainer\n","trainer = Trainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=train_dataset,\n","    eval_dataset=val_dataset,\n","    tokenizer=tokenizer\n",")\n","\n","# Step 8: Fine-tune the model\n","trainer.train()\n","\n","# Step 9: Save the fine-tuned model and tokenizer\n","model.save_pretrained(\"fine_tuned_llama_synthetic\")\n","tokenizer.save_pretrained(\"fine_tuned_llama_synthetic\")\n"]}]}