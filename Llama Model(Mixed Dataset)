{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOWqJa3vrImbS8r7yhCSu5q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# New Code - Please iron this one out for bugs\n","\n","!pip install transformers datasets -q\n","!pip install torch scikit-learn -q\n","\n","import json\n","from datasets import Dataset\n","from sklearn.model_selection import train_test_split\n","from transformers import AutoModelForCausalLM, AutoTokenizer, Trainer, TrainingArguments\n","import torch\n","\n","# Step 1: Load the new JSON data\n","with open(\"new_data.json\", \"r\") as data_file:\n","    puzzles = json.load(data_file)\n","\n","# Step 2: Convert the data into instruction-response pairs\n","instruction_response_pairs = []\n","\n","for puzzle in puzzles:\n","    # Generate instruction\n","    final_puzzle = puzzle[\"final_puzzle\"]\n","    instruction = f\"Group the following words into 4 categories:\\n{', '.join(final_puzzle)}\"\n","\n","    # Generate response\n","    final_groups = puzzle[\"final_groups\"]\n","    response = \"\\n\".join(\n","        [f\"{category}: {', '.join(words)}\" for category, words in final_groups.items()]\n","    )\n","\n","    # Append the instruction-response pair\n","    instruction_response_pairs.append({\"instruction\": instruction, \"response\": response})\n","\n","# Step 3: Split into train and validation datasets\n","train_list, val_list = train_test_split(instruction_response_pairs, train_size=0.8, random_state=42)\n","train_dataset = Dataset.from_list(train_list)\n","val_dataset = Dataset.from_list(val_list)\n","\n","# Step 4: Tokenize the data\n","# Define the tokenizer\n","model_name = \"facebook/opt-1.3b\"  # Replace with an actual Hugging Face model\n","tokenizer = AutoTokenizer.from_pretrained(model_name)\n","\n","def tokenize_data(example):\n","    # Concatenate instruction and response with EOS token\n","    input_text = example[\"instruction\"] + tokenizer.eos_token + example[\"response\"]\n","    tokenized = tokenizer(\n","        input_text,\n","        truncation=True,\n","        padding=\"max_length\",\n","        max_length=512,\n","        return_tensors=\"pt\"\n","    )\n","    return {\n","        \"input_ids\": tokenized[\"input_ids\"].squeeze(0),\n","        \"attention_mask\": tokenized[\"attention_mask\"].squeeze(0)\n","    }\n","\n","# Tokenize datasets\n","train_dataset = train_dataset.map(tokenize_data)\n","val_dataset = val_dataset.map(tokenize_data)\n","\n","# Set datasets to return PyTorch tensors\n","train_dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\"])\n","val_dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\"])\n","\n","# Step 5: Load LLaMA model and define training arguments\n","model = AutoModelForCausalLM.from_pretrained(model_name)\n","\n","training_args = TrainingArguments(\n","    output_dir=\"./llama-fine-tuned-output\",\n","    evaluation_strategy=\"epoch\",\n","    learning_rate=5e-5,\n","    per_device_train_batch_size=4,\n","    per_device_eval_batch_size=4,\n","    num_train_epochs=3,\n","    weight_decay=0.01,\n","    save_strategy=\"epoch\",\n","    logging_dir=\"./logs\",\n","    logging_steps=10,\n","    save_total_limit=2,\n","    load_best_model_at_end=True,\n","    fp16=torch.cuda.is_available(),  # Use mixed precision if GPU supports it\n",")\n","\n","# Step 6: Initialize Trainer\n","trainer = Trainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=train_dataset,\n","    eval_dataset=val_dataset,\n","    tokenizer=tokenizer\n",")\n","\n","# Step 7: Fine-tune the model\n","trainer.train()\n","\n","# Step 8: Save the fine-tuned model and tokenizer\n","model.save_pretrained(\"fine_tuned_llama\")\n","tokenizer.save_pretrained(\"fine_tuned_llama\")\n"],"metadata":{"id":"Biyxo0H5dgx1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Reference\n","import json\n","from datasets import Dataset\n","from sklearn.model_selection import train_test_split\n","from transformers import LlamaForCausalLM, LlamaTokenizer, Trainer, TrainingArguments\n","\n","# Step 1: Load the new JSON data\n","with open(\"new_data.json\", \"r\") as data_file:\n","    puzzles = json.load(data_file)\n","\n","# Step 2: Convert the data into instruction-response pairs\n","instruction_response_pairs = []\n","\n","for puzzle in puzzles:\n","    # Generate instruction\n","    final_puzzle = puzzle[\"final_puzzle\"]\n","    instruction = f\"Group the following words into 4 categories:\\n{', '.join(final_puzzle)}\"\n","\n","    # Generate response\n","    final_groups = puzzle[\"final_groups\"]\n","    response = \"\\n\".join(\n","        [f\"{category}: {', '.join(words)}\" for category, words in final_groups.items()]\n","    )\n","\n","    # Append the instruction-response pair\n","    instruction_response_pairs.append({\"instruction\": instruction, \"response\": response})\n","\n","# Step 3: Split into train and validation datasets\n","train_list, val_list = train_test_split(instruction_response_pairs, train_size=0.8, random_state=42)\n","train_dataset = Dataset.from_list(train_list)\n","val_dataset = Dataset.from_list(val_list)\n","\n","# Step 4: Tokenize the data\n","# Define the tokenizer\n","tokenizer = LlamaTokenizer.from_pretrained(\"model_name\")\n","\n","def tokenize_data(example):\n","    tokenized = tokenizer(\n","        example[\"instruction\"] + tokenizer.eos_token + example[\"response\"],\n","        truncation=True,\n","        padding=\"max_length\",\n","        max_length=512\n","    )\n","    return tokenized\n","\n","train_dataset = train_dataset.map(tokenize_data, batched=True)\n","val_dataset = val_dataset.map(tokenize_data, batched=True)\n","\n","# Step 5: Load LLaMA model and define training arguments\n","model = LlamaForCausalLM.from_pretrained(\"model_name\")\n","\n","training_args = TrainingArguments(\n","    output_dir=\"./llama-fine-tuned-output\",\n","    evaluation_strategy=\"epoch\",\n","    learning_rate=5e-5,\n","    per_device_train_batch_size=4,\n","    per_device_eval_batch_size=4,\n","    num_train_epochs=3,\n","    weight_decay=0.01,\n","    save_strategy=\"epoch\",\n","    logging_dir=\"./logs\",\n","    logging_steps=10,\n","    save_total_limit=2,\n","    load_best_model_at_end=True,\n",")\n","\n","# Step 6: Initialize Trainer\n","trainer = Trainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=train_dataset,\n","    eval_dataset=val_dataset,\n","    tokenizer=tokenizer\n",")\n","\n","# Step 7: Fine-tune the model\n","trainer.train()\n","\n","# Step 8: Save the fine-tuned model and tokenizer\n","model.save_pretrained(\"fine_tuned_llama\")\n","tokenizer.save_pretrained(\"fine_tuned_llama\")\n"],"metadata":{"id":"D5WC8EFzXEP9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Old code - no need to check, Left here as reference\n","\n","import json\n","from datasets import Dataset\n","from sklearn.model_selection import train_test_split\n","from transformers import LlamaForCausalLM, LlamaTokenizer, Trainer, TrainingArguments\n","\n","# Step 1: Load mixed data (Testing Data and Answers)\n","with open(\"Testing_Data.json\", \"r\") as data_file:\n","    test_data = json.load(data_file)\n","\n","with open(\"Testing_Data_Ans.json\", \"r\") as answers_fil:\n","    test_answers = json.load(answers_file)\n","\n","# Step 2: Convert mixed data into instruction-response pairs\n","mixed_dataset_list = []\n","for game_id, words in test_data.items():\n","    for answer in test_answers:\n","        if str(answer[\"id\"]) == game_id:\n","            correct_groups = answer[\"answers\"]\n","            instruction = f\"Group the following words into 4 categories with 4 words each:\\n{', '.join(words)}\"\n","            response = \"\\n\".join(\n","                [f\"{i + 1}. {', '.join(group['members'])}\" for i, group in enumerate(correct_groups)]\n","            )\n","            mixed_dataset_list.append({\"instruction\": instruction, \"response\": response})\n","            break\n","\n","# Step 3: Split into train and validation datasets\n","train_list, val_list = train_test_split(mixed_dataset_list, train_size=0.8, random_state=42)\n","train_dataset = Dataset.from_list(train_list)\n","val_dataset = Dataset.from_list(val_list)\n","\n","# Step 4: Tokenize the data (same as synthetic dataset)\n","train_dataset = train_dataset.map(tokenize_data, batched=True)\n","val_dataset = val_dataset.map(tokenize_data, batched=True)\n","\n","# Step 5: Load LLaMA model and tokenizer\n","training_args.output_dir = \"./llama-3.1-8b-mixed-output\"\n","\n","trainer = Trainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=train_dataset,\n","    eval_dataset=val_dataset,\n","    tokenizer=tokenizer\n",")\n","\n","# Step 6: Fine-tune the model\n","trainer.train()\n","\n","# Step 7: Save the fine-tuned model and tokenizer\n","model.save_pretrained(\"fine_tuned_llama_mixed\")\n","tokenizer.save_pretrained(\"fine_tuned_llama_mixed\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":393},"id":"OWxruopKfy31","executionInfo":{"status":"error","timestamp":1732373353213,"user_tz":0,"elapsed":233,"user":{"displayName":"George Pulickan","userId":"10998863919824261837"}},"outputId":"93c65919-c14d-46d2-8d10-3c6b499b1168"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'datasets'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-502526380e44>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mdatasets\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtransformers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLlamaForCausalLM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLlamaTokenizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTrainer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTrainingArguments\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'datasets'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":[],"metadata":{"id":"l_BwoK6oZo0i"},"execution_count":null,"outputs":[]}]}